# -*- coding: utf-8 -*-
"""License Plate.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17rUy2v_DuKGSpYf6aP6mnlwsfB_ctyCl
"""

#!tesseract --version

#!sudo apt-get install tesseract-ocr

#!which tesseract

#import pytesseract

# Set the path to the Tesseract executable
#pytesseract.pytesseract.tesseract_cmd = '/usr/bin/tesseract'

#!pip install imutils

import cv2
import numpy as np
import imutils
import pytesseract
import PIL

from google.colab.patches import cv2_imshow

image = cv2.imread("image.jpg")
image = imutils.resize(image, width=300)
cv2_imshow(image)
cv2.waitKey(0)

gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
cv2_imshow(gray_image)
cv2.waitKey(0)

gray_image = cv2.bilateralFilter(gray_image, 11, 17, 17)
cv2_imshow(gray_image)
cv2.waitKey(0)

edged = cv2.Canny(gray_image, 30, 200)
cv2_imshow(edged)
cv2.waitKey(0)

cnts, new = cv2.findContours(edged.copy(), cv2.RETR_LIST,
                             cv2.CHAIN_APPROX_SIMPLE)

image1 = image.copy()
cv2.drawContours(image1, cnts, -1, (0, 255, 0))

cv2_imshow(image1)
cv2.waitKey(0)

cnts = sorted(cnts, key=cv2.contourArea, reverse=True)[:30]
screenCnt = None
image2 = image.copy()
cv2.drawContours(image2, cnts, -1, (0, 255, 0), 3)
cv2_imshow(image2)
cv2.waitKey(0)

i = 7
for c in cnts:
    perimeter = cv2.arcLength(c, True)
    approx = cv2.approxPolyDP(c, 0.018 * perimeter, True)
    if len(approx) == 4:
        screenCnt = approx
        x, y, w, h = cv2.boundingRect(c)
        new_image = image[y:y + h, x:x + w]
        cv2.imwrite('./' + str(i) + ".jpg", new_image)
        i += 1
        break

cv2.drawContours(image, [screenCnt], -1, (0, 255, 0), 3)
cv2_imshow(image)
cv2.waitKey(0)

cropped_loc = './7.jpg'  # Assuming the image is saved as JPEG
cropped_image = cv2.imread(cropped_loc)

# Preprocess the cropped image
gray_plate = cv2.cvtColor(cropped_image, cv2.COLOR_BGR2GRAY)
_, binary_plate = cv2.threshold(gray_plate, 0, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)
kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
processed_plate = cv2.morphologyEx(binary_plate, cv2.MORPH_CLOSE, kernel)

# Convert the processed image to PIL Image or numpy array
plate_pil = PIL.Image.fromarray(processed_plate)

# Perform OCR on the processed image
plate_text = pytesseract.image_to_string(plate_pil, lang='eng', config='--psm 7 --oem 3')
print("Detected Plate:", plate_text)